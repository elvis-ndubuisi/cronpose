// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  credits Int @default(0)

  subscribers Subscriber[]
  subFolders  SubscriberFolder[]
  mails       Mail[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscriber {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  address       String
  unsubscribeId String  @default(uuid())

  authorId String? @db.ObjectId
  author   User?   @relation(fields: [authorId], references: [id])

  folders String[] @db.ObjectId

  @@index([address])
}

model SubscriberFolder {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  authorId String? @db.ObjectId
  author   User?   @relation(fields: [authorId], references: [id])

  subscribers String[]
}

model Mail {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  recipients    String[]
  ccRecipients  String[] @default([])
  bccRecipients String[] @default([])
  subject       String
  body          String?
  from          String?

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])

  status    Status   @default(DRAFT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  DRAFT
  SENT
  PENDING
  TRASH
}
